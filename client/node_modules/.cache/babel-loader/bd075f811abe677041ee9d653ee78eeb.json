{"ast":null,"code":"var _jsxFileName = \"/Users/derektam/Documents/strava-client/src/components/Dashboard/index.js\";\nimport React, { useContext, useState } from \"react\";\nimport { AuthContext } from \"../App\";\nimport { useCookies } from \"react-cookie\";\nimport { asyncFetch } from \"../helpers/asyncFetch\";\nconst metersToMiles = 0.000621371192;\nexport default function Dashboard() {\n  const [cookies] = useCookies();\n  const context = useContext(AuthContext);\n  const [stats, setStats] = useState(null);\n  const {\n    access_token\n  } = cookies;\n\n  function AthleteStats() {\n    let athleteStatsUrl = `https://www.strava.com/api/v3/athletes/${context.user.id}/stats`;\n\n    if (access_token && !stats) {\n      asyncFetch(athleteStatsUrl, cookies.access_token).then(data => {\n        return data.json();\n      }).then(stats => {\n        setStats(stats);\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, \"Loading Stats...\");\n    } else {\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, (stats.all_run_totals.distance * metersToMiles).toFixed(1), \" miles\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, context.user.clubs.map(club => {\n        return club.name;\n      })));\n    }\n  }\n\n  function ClubMembers() {\n    const clubIds = context.user.clubs.map(club => {\n      let clubMembersUrl = `https://www.strava.com/api/v3/clubs/${club.id}/members`;\n    });\n\n    if (access_token && !stats) {\n      asyncFetch(clubMembersUrl, cookies.access_token).then(data => {\n        return data.json();\n      }).then(stats => {\n        setStats(stats);\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, \"Loading Club Members...\");\n    } else {\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, (stats.all_run_totals.distance * metersToMiles).toFixed(1), \" miles\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, context.user.clubs.map(club => {\n        return club.name;\n      })));\n    }\n  }\n\n  if (!context.user) {\n    return \"Athlete not found.\";\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, `${context.user.firstname}${\" \"}${context.user.lastname}`), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, `${context.user.city}${\", \"}${context.user.state}`), React.createElement(AthleteStats, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, context.user.clubs.map(club => {\n    return React.createElement(ClubMembers, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    });\n  })));\n}","map":{"version":3,"sources":["/Users/derektam/Documents/strava-client/src/components/Dashboard/index.js"],"names":["React","useContext","useState","AuthContext","useCookies","asyncFetch","metersToMiles","Dashboard","cookies","context","stats","setStats","access_token","AthleteStats","athleteStatsUrl","user","id","then","data","json","all_run_totals","distance","toFixed","clubs","map","club","name","ClubMembers","clubIds","clubMembersUrl","firstname","lastname","city","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,SAASC,WAAT,QAA4B,QAA5B;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,UAAT,QAA2B,uBAA3B;AAEA,MAAMC,aAAa,GAAG,cAAtB;AAEA,eAAe,SAASC,SAAT,GAAqB;AAClC,QAAM,CAACC,OAAD,IAAYJ,UAAU,EAA5B;AACA,QAAMK,OAAO,GAAGR,UAAU,CAACE,WAAD,CAA1B;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAmBJ,OAAzB;;AAEA,WAASK,YAAT,GAAwB;AACtB,QAAIC,eAAe,GAAI,0CAAyCL,OAAO,CAACM,IAAR,CAAaC,EAAG,QAAhF;;AACA,QAAIJ,YAAY,IAAI,CAACF,KAArB,EAA4B;AAC1BL,MAAAA,UAAU,CAACS,eAAD,EAAkBN,OAAO,CAACI,YAA1B,CAAV,CACGK,IADH,CACQC,IAAI,IAAI;AACZ,eAAOA,IAAI,CAACC,IAAL,EAAP;AACD,OAHH,EAIGF,IAJH,CAIQP,KAAK,IAAI;AACbC,QAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,OANH;AAOA,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAP;AACD,KATD,MASO;AACL,aACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,CAACA,KAAK,CAACU,cAAN,CAAqBC,QAArB,GAAgCf,aAAjC,EAAgDgB,OAAhD,CAAwD,CAAxD,CADH,WADF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGb,OAAO,CAACM,IAAR,CAAaQ,KAAb,CAAmBC,GAAnB,CAAuBC,IAAI,IAAI;AAC9B,eAAOA,IAAI,CAACC,IAAZ;AACD,OAFA,CADH,CAJF,CADF;AAYD;AACF;;AAED,WAASC,WAAT,GAAuB;AACrB,UAAMC,OAAO,GAAGnB,OAAO,CAACM,IAAR,CAAaQ,KAAb,CAAmBC,GAAnB,CAAuBC,IAAI,IAAI;AAC7C,UAAII,cAAc,GAAI,uCAAsCJ,IAAI,CAACT,EAAG,UAApE;AACD,KAFe,CAAhB;;AAIA,QAAIJ,YAAY,IAAI,CAACF,KAArB,EAA4B;AAC1BL,MAAAA,UAAU,CAACwB,cAAD,EAAiBrB,OAAO,CAACI,YAAzB,CAAV,CACGK,IADH,CACQC,IAAI,IAAI;AACZ,eAAOA,IAAI,CAACC,IAAL,EAAP;AACD,OAHH,EAIGF,IAJH,CAIQP,KAAK,IAAI;AACbC,QAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,OANH;AAOA,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAAP;AACD,KATD,MASO;AACL,aACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,CAACA,KAAK,CAACU,cAAN,CAAqBC,QAArB,GAAgCf,aAAjC,EAAgDgB,OAAhD,CAAwD,CAAxD,CADH,WADF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGb,OAAO,CAACM,IAAR,CAAaQ,KAAb,CAAmBC,GAAnB,CAAuBC,IAAI,IAAI;AAC9B,eAAOA,IAAI,CAACC,IAAZ;AACD,OAFA,CADH,CAJF,CADF;AAYD;AACF;;AAED,MAAI,CAACjB,OAAO,CAACM,IAAb,EAAmB;AACjB,WAAO,oBAAP;AACD;;AACD,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAO,GAAEN,OAAO,CAACM,IAAR,CAAae,SAAU,GAAE,GAAI,GAAErB,OAAO,CAACM,IAAR,CAAagB,QAAS,EAA9D,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAO,GAAEtB,OAAO,CAACM,IAAR,CAAaiB,IAAK,GAAE,IAAK,GAAEvB,OAAO,CAACM,IAAR,CAAakB,KAAM,EAAvD,CAFF,EAGE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGxB,OAAO,CAACM,IAAR,CAAaQ,KAAb,CAAmBC,GAAnB,CAAuBC,IAAI,IAAI;AAC9B,WAAO,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAFA,CADH,CAJF,CADF;AAYD","sourcesContent":["import React, { useContext, useState } from \"react\";\nimport { AuthContext } from \"../App\";\nimport { useCookies } from \"react-cookie\";\nimport { asyncFetch } from \"../helpers/asyncFetch\";\n\nconst metersToMiles = 0.000621371192;\n\nexport default function Dashboard() {\n  const [cookies] = useCookies();\n  const context = useContext(AuthContext);\n  const [stats, setStats] = useState(null);\n  const { access_token } = cookies;\n\n  function AthleteStats() {\n    let athleteStatsUrl = `https://www.strava.com/api/v3/athletes/${context.user.id}/stats`;\n    if (access_token && !stats) {\n      asyncFetch(athleteStatsUrl, cookies.access_token)\n        .then(data => {\n          return data.json();\n        })\n        .then(stats => {\n          setStats(stats);\n        });\n      return <div>Loading Stats...</div>;\n    } else {\n      return (\n        <React.Fragment>\n          <div>\n            {(stats.all_run_totals.distance * metersToMiles).toFixed(1)} miles\n          </div>\n          <div>\n            {context.user.clubs.map(club => {\n              return club.name;\n            })}\n          </div>\n        </React.Fragment>\n      );\n    }\n  }\n\n  function ClubMembers() {\n    const clubIds = context.user.clubs.map(club => {\n      let clubMembersUrl = `https://www.strava.com/api/v3/clubs/${club.id}/members`;\n    });\n\n    if (access_token && !stats) {\n      asyncFetch(clubMembersUrl, cookies.access_token)\n        .then(data => {\n          return data.json();\n        })\n        .then(stats => {\n          setStats(stats);\n        });\n      return <div>Loading Club Members...</div>;\n    } else {\n      return (\n        <React.Fragment>\n          <div>\n            {(stats.all_run_totals.distance * metersToMiles).toFixed(1)} miles\n          </div>\n          <div>\n            {context.user.clubs.map(club => {\n              return club.name;\n            })}\n          </div>\n        </React.Fragment>\n      );\n    }\n  }\n\n  if (!context.user) {\n    return \"Athlete not found.\";\n  }\n  return (\n    <div>\n      <div>{`${context.user.firstname}${\" \"}${context.user.lastname}`}</div>\n      <div>{`${context.user.city}${\", \"}${context.user.state}`}</div>\n      <AthleteStats />\n      <div>\n        {context.user.clubs.map(club => {\n          return <ClubMembers />;\n        })}\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}